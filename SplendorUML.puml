@startuml

class Jeu {
- handler:static Handler
- joueur_actuel: Joueur*
- joueur_gagnant: Joueur*
--
- libereJeu():void
- nouvellePartie():void
- reprendrePartie():void
- verifAnciennePartie():void
- verifGagnant(Joueur * j1, Joueur * j2): void
- sauvegarderPartie():void
- vainqueur(Joueur * j): void
- auSuivant(Joueur * j1, Joueur * j2): void
- verifCarteNoble(Joueur * j, Plateau * p): void
- manche(Plateau * p, Pioche * p1, Pioche * p2, Pioche * p3, Joueur * j1, Joueur * j2, Obligatoire * obl, Optionnelle * opt): void
- tour(Plateau * p, Pioche * p1, Pioche * p2, Pioche * p3, Joueur * j, Obligatoire * obl, Optionnelle * opt): void
+ getJoueurActuel() const: Joueur*
+ getJoueurGagnant() const: Joueur*
+ validationAction()
}

struct Handler {
    + instance:Jeu *
}

class Affichage{
- affichage()
- afficherRegles()
- afficherConditionVictoire()
- afficherPoint()
}


class Plateau {
- jetons:Jeton[25]
- privilege:Privilege[3]
- sac:Jeton[3]
- cartes_nobles:CarteNoble[3]
- nb_jetons_sac : unsigned int
- nb_jetons_plateau : unsigned int
- pointeur_case_libre : unsigned int
- nb_privileges : unsigned int
- nb_carte_noble : unsigned int
- selection_courante : const Jeton[]
- selection_courante_positions : int[]
- nombre_jetons_dans_selection : unsigned int
- nombre_jetons_par_cote_de_plateau unsigned int
- nombre_jetons_dans_selection_MAX unsigned int
- nb_jetons_sac_MAX  unsigned int
- nb_privileges_MAX  unsigned int
- nb_jetons_plateau_MAX unsigned int
- matrix: unsigned int[5][5]
-- methods --
- parcoursPlateauVerificationPosition(unsigned int x, unsigned int y, int, int) : std::vector<unsigned int>
+ verificationSelectionPositions() : bool
+ remplissagePlateau(bool avecAffichage = false):
+ etatPlateau() : string
+ ajouterSac(const Jeton *j)
+ selectionJeton(unsigned int position_x, unsigned int position_y): int
+ validerSelectionEtPrendreJetons() : std::vector<const Jeton*>
+ prendreJeton(unsigned int position_x, unsigned int position_y) : const Jeton
+ prendrePrivilege() : const Privilege*
+ donnePrivilege(const Privilege* p)
+ prendreCarteNoble(unsigned int numero) : const CarteNoble*
+ hasJeton() : bool
+ getNbJetonsPlateau() const : unsigned int
+ getNbJetonsPlateauMAX() const : unsigned int
+ getNbJetonsSac() const : unsigned int
+ getNbPrivilegeMAX() const : unsigned int
+ getNbPrivileges() const : unsigned int
+ hasJetonOr() : bool
+ donnePositionsPossiblesAPartirDe((unsigned int, unsigned int) : std::vector<std::vector<unsigned int>>
}


abstract class Joueur {
    # pseudo: string
    # nombre_couronnes: int
    # points_prestige_total: int
    # points_prestige_couleurs: vector<int>
    # cartes_reservees: vector<CarteJoaillerie*>
    # cartes_main: vector<CarteJoaillerie*>
    # cartes_noble: vector<CarteNoble*>
    # gemmes_bonus: vector<int>
    # nb_jeton: vector<int>
    # privileges: vector<Privilege*>
    # adversaire: Joueur*
    # droit_de_rejouer: bool
    # info: FenetreInformations*
    # isIA: bool
    # diff: Difficulte


    - Joueur(nom: const string )
    - ~Joueur() : virtuelle
    - Joueur(autre : const Joueur&)
    - operator=(autre const Joueur&) : Joueur&
    + setInfo(f FenetreInformations*) : void
    + getInfo() : int sont
    + getPointsPrestigeTotal(): int const
    + getPseudo(): string const
    + getNombreCouronnes(): int const
    + getPointsPrestigeCouleurs(index: int): int const
    + getCarteReservee(index: int): const CarteJoaillerie* const
    + getCarteMain(index : int) : CarteJoaillerie * const
    + getCarteNoble(index: int): CarteNoble const
    + getGemmesBonus(index: int): int const
    + getCartesReservees(): std::vector<CarteJoaillerie*> const
    + getCartesMain(): std::vector<CarteJoaillerie*> const
    + getCartesNoble(): std::vector<CarteNoble*> const
    + getPrivileges(): const std::vector<Privilege*>& const
    + ajouterCarteJoaillerie(carte: CarteJoaillerie): void
    + ajouterCarteNoble(carte: const CarteNoble&): void
    + ajouterCarteReservee(carte: const CarteJoaillerie&): void
    + ajouterPrivilege(privilege: const Privilege&): void
    + setPointsPrestigeCouleurs(index: int, valeur: int): void
    + setGemmesBonus(index: int, value: int): void
    + setNombreCouronnes(nbCour: int): void
    + setPseudo(pse: std::string): void
    + setPointsPrestigeTotal(pointP: int): void
    + getAdversaire(): Joueur*
    + setAdversaire(adv: Joueur*): void
    + hasPrivilege(): bool
    + removePrivilege(): Privilege
    + peutRejouer(): bool
    + resetRejouer(reset: bool): void
    + getNombreDePrivileges(): int const
    + getNbCartesReservees(): int const
    + getNombreCartesNobles() : int const
    + getNbJeton(index: int): int const
    + getNbJetonsParCouleur(couleur : int) : int const
    + setNbJeton(index: int, value: int): void
    + getDroitDeRejouer(): bool const
    + getIsIA(): bool const
    + setIsIA(isia: bool): void const
    + getDifficulte(): Difficulte const
    + setDifficulte(difficulte: Difficulte): void
    + initialiserJoueur(): void
    + choisirChoix(min: int, max: int): int virtuelle
}

class IA {
      # difficulte: Difficulte

      + IA(pseudo: string, diff: Difficulte)
      +~IA()
      + choisirChoix(min: int, max: int): int override
      +setDifficulte(Diff : difficulte) : void
      {abstract} + choisirJetonSurPlateau(plateau: Plateau*): void
      {abstract} + prendreJetons(plateau: Plateau*): void
      {abstract} + genererCombinaisonsDeuxJetons(plateau: Plateau*): vector<pair<const Jeton*, const Jeton*>>
      {abstract} + genererCombinaisonsTroisJetons(plateau: Plateau*): vector<tuple<const Jeton*, const Jeton*, const Jeton*>>
      {abstract} + melangerEtObtenirDerniereCarte(pioche: Pioche&, joueur: Joueur&, plateau : Plateau&): CarteJoaillerie*
      {abstract} + getCartesAchetable(pioche: const Pioche&): vector<CarteJoaillerie*> const
}

class Humain {
    + Humain(pseudo: string)
    +~Humain()
    + choisirChoix(min: int, max: int): int override
}


class FenetreInformations{
  +labelNom: QLabel*
  +labelPriviliges: QLabel*
  +labelCouronnes: QLabel*
  +labelCartesNobles: QLabel*
  +labelCartesReservees: QLabel*
  +labelJetons: QLabel*
  +labelJetonsParCouleur[7]: QLabel*
  -joueur: Joueur*

  +FenetreInformations(j: Joueur*, parent: QWidget* = nullptr)
  +miseAJourInformations(): void
  +setJoueur(j: Joueur*): void
  -getNomCouleur(couleur: int): QString const
  -getCouleurTexte(couleur: int): QString const

}

enum Difficulte <<enumeration>> {
 aleatoire
 facile
 moyen
 difficile
}

enum JetonType <<enumeration>> {
Or
Gemme
}
class Jeton {
-id: unsigned int
-type: JetonType
-couleur: Couleur
-chemin_vers_image: string
-positionX: unsigned int
-positionY: unsigned int
+afficher() const;
+getCouleurString() const: string
+getCouleur() const: Couleur
+getType() const: JetonType
+getID() const: unsigned int
+getX() const: unsigned int
+getY() const: unsigned int
+setID(i: unsigned int)
+setX(i: unsigned int)
+setY(i: unsigned int)
}

enum PrivilegeStatus <<enumeration>> {
NONE
POSSEDE
}

class Privilege {
-status: PrivilegeStatus
-id: int
+getStatus(): PrivilegeStatus
+setStatus(p:PrivilegeStatus)
+getID() const: int
}


enum Couleur <<enumeration>> {
 bleu
 vert
 rouge
 blanc
 noir
 rose
 rien
 choix_utilisateur
}

class Pioche{
- numero_pioche:int const
- cartes_dans_pioche:CarteJoaillerie*[] const
- cartes_dehors:CarteJoaillerie*[] const
- max_cartes_revelees:int
- max_cartes_pioche:int const
- getNumeroPioche() const: const int
- getCartesDansPioche(int i) const : const CarteJoaillerie *
- getCartesDehors(int i) const : const CarteJoaillerie *
- getMaxCartesRevelees() const : const int
- getMaxCartesPioche() const : int
- Pioche(const int np, const int mcr, int mcp);
- ~Pioche();
- joueurPrend(int numero_carte): const CarteJoaillerie *
- distribution(): void
- joueurPrendPioche(): const CarteJoaillerie *
}

class VuePioche {
- vuecartes1: std::vector<VueCarteJoaillerie*>
- vuecartes2: std::vector<VueCarteJoaillerie*>
- vuecartes3: std::vector<VueCarteJoaillerie*>
- vuescartes_tot: std::vector<std::vector<VueCarteJoaillerie*>>
- vuedoscartes: std::vector<QPushButton*>
- layout_pioches: std::vector<QHBoxLayout*>
- layoutPioches: QVBoxLayout *
- layoutPioche1: QHBoxLayout *
- layoutPioche2: QHBoxLayout *
- layoutPioche3: QHBoxLayout *
- layoutDosPioche: QVBoxLayout *
- layoutPlateauCarte: QHBoxLayout *
- valider: QPushButton*
- pioches: std::vector<Pioche*>
- tot_cartes_jo: std::vector<CarteJoaillerie*>
- mettreAJour(index_to_update: int, index_carte: int): void
- carteSelectionnee: VueCarteJoaillerie *
- carteClique(VueCarteJoaillerie *): void
- validerCarte(): void
+ VuePioche(p1: Pioche*, p2: Pioche*, p3: Pioche*, tot_cartes_jo: std::vector<CarteJoaillerie*>, parent: QWidget = nullptr): void
}

class Carte {
# chemin_vers_image:string
# point_prestige:int
# courronnes:int
# pouvoirs: array<Pouvoir, 2>
+ actionPouvoir(plateau: Plateau*, joueur: Joueur*)
+ getPointsPrestige(): int
+ getCourronnes(): int
+ getCheminVersImage() const: string
+ existancePouvoir():array<Pouvoir, 2>
# prendrePrivilege(plateau: Plateau*, joueur: Joueur*):Privilege
# volerJeton(couleurIndex: int, joueur: Joueur*):bool
# prendreJeton(position_x: unsigned int, position_y: unsigned int, plateau: Plateau*, joueur: Joueur*): bool
# rejouer(joueur: Joueur*)
# rajouteBonus(couleurIndex: int, joueur: Joueur*)
}
note left: S'il n'y a pas de pouvoir, alors pouvoirs[index]=rien

class CarteNoble {
-couronne: int
-pointPrestige: int
-id: const int
+getCouronne() const: int
+getPointPrestige() const: int
+getID() const: int
}

class CarteJoaillerie {
-niveau: int
-couronne: int
-pierres: array<Couleur, 2>
-prix: map<Couleur, int>
-id: const int
+getPrix() const:map<Couleur, int>
+getNiveau() const: int
+getCouronne() const: int
+getID() const: int
+hasPierre() const: bool
+getTypePierre() const : Couleur
+setPierreColor(index:int, couleur:Couleur)
+getPierres() const: array<Couleur, 2>
+getNombrePierre() const: int
}
note left: S'il n'y a pas de pierre, alors pierres[index]=rien


enum Pouvoir <<enumeration>> {
 rien
 nouveau_tour
 bonus_pierre
 pierre_en_plus
 privilege_en_plus
 vol_pierre
}


class Optionnelle {
{static} depenserPrivilege(Joueur* joueur, Plateau* plateau)
{static} remplissagePlateau(Joueur* joueur, Plateau* plateau)
}

class Obligatoire {
{static} prendreJeton(Joueur* joueur, Plateau* plateau)
{static} demanderCarteAReserver(Joueur* joueur, Plateau* plateau, Pioche* p1, Pioche* p2, Pioche* p3)
{static} reserverCarte(Joueur* j, Plateau* plateau, Pioche* p1, Pioche* p2, Pioche* p3, int n_pioche, int n_carte, bool carte_revelee = true)
{static} acheterCarte(Joueur* joueur, Plateau* plateau, Pioche* p1, Pioche* p2, Pioche* p3)
{static} remettreJetonSac(Joueur* joueur, Plateau* plateau, Couleur c, int difference, int prix_elem, int index)
{static} ajouterJetonsJoueur(Joueur* joueur, std::vector<const Jeton*> selection): std::vector<int>
{static} achatPiochePossible(Joueur* joueur, Pioche* p): bool
{static} achatCartePossible(Joueur *joueur, std::vector<int> difference): bool
{static} calculDifference(Joueur* joueur, std::map<Couleur, int> prix): std::vector<int>
{static} donnerPrivilegeAdversaire(Joueur* joueur, Plateau* plateau)
}


class VueCarteJoaillerie {
  - carteJoaillerieId: unsigned int
  - carte_rep: const CarteJoaillerie*
  + VueCarteJoaillerie(unsigned int id, const std::vector<const CarteJoaillerie*> cartes, QWidget* parent = nullptr)
  + VueCarteJoaillerie(const CarteJoaillerie* c, const std::vector<CarteJoaillerie*> cartes, QWidget* parent = nullptr)
  + getCarteJoaillerieId(): unsigned int
  + getPrix(): std::map<Couleur, int>
  + getCarte(): const CarteJoaillerie*
  + carteClickJ(VueCarteJoaillerie*): void
  <<signal>> + carteClickJ(VueCarteJoaillerie*): void
  <<slot>> - clickedEvent(): void
  - findCarteById(unsigned int id, const std::vector<const CarteJoaillerie*>& cartes): const CarteJoaillerie*
  - findCarteById(unsigned int id, const std::vector< CarteJoaillerie*>& cartes): const CarteJoaillerie*
}

class VueCarteNoble {
  - vue_plateau: VuePlateau*
  - carte: const CarteNoble*
  - numero: unsigned int
  - parent: QWidget*
  + VueCarteNoble(unsigned int n, VuePlateau* vp, QWidget* parent = nullptr)
  + getNumero(): unsigned int
  <<signal>> - carteClick(VueCarteNoble*): void
  <<slot>> - clickedEvent(): void
}

class VueJeton {
  - jeton: const Jeton*
  - pos_x: unsigned int
  - pos_y: unsigned int
  - is_selected: bool
  - parent: QWidget*
  - base_couleur: QColor
  - pen: QPen
  - brush: QBrush
  - setButtonColors(backgroundColor : const QColor&, texteColor : const QColor&) : void
  + VueJeton(const Jeton* j, unsigned int x, unsigned int y, QWidget* parent = nullptr)
  + getJeton(): const Jeton*
  + setJeton(const Jeton* j): void
  + getX(): unsigned int
  + getY(): unsigned int
  + setSelected(bool s): void
  # paintEvent(QPaintEvent *event): void
  <<signal>> - jetonClick(VueJeton*): void
  <<slot>> - clickedEvent(): void
}

class VueJeu {
  - compteur_action_optionnelles: int
  - a_fini_optionnelles: bool
  - a_fini_obligatoires: bool
  - peut_passer_tour_suivant: bool
  - jeu: Jeu*
  - j1: Joueur*
  - j2: Joueur*
  - pioche1: Pioche*
  - pioche2: Pioche*
  - pioche3: Pioche*
  - pioches: std::vector<Pioche*>
  - vue_pioche: VuePioche*
  - cartesJoaillerie: std::vector<CarteJoaillerie*>
  - layout_main: QVBoxLayout*
  - layout_menu: QVBoxLayout*
  - layout_choix_joueurs: QVBoxLayout*
  - layout_jeu: QVBoxLayout*
  - layout_centre: QHBoxLayout*
  - layout_top: QHBoxLayout*
  - layout_bas: QHBoxLayout*
  - vue_plateau: VuePlateau*
  - vueJoueur1: FenetreInformations*
  - vueJoueur2: FenetreInformations*
  - vuesCartesNobles: std::vector<VueCarteNoble*>
  - bouton_nouvelle_partie: QPushButton*
  - bouton_charger_partie: QPushButton*
  - bouton_sauvegarde: QPushButton*
  - bouton_joueur_joueur: QPushButton*
  - bouton_joueur_IA: QPushButton*
  - bouton_IA_IA: QPushButton*
  - bouton_depenser_privilege: QPushButton*
  - bouton_prendre_jeton: QPushButton*
  - bouton_acheter_carte: QPushButton*
  - bouton_reserver_carte: QPushButton*
  - bouton_remplir_plateau: QPushButton*
  - db: sqlite3*
  + VueJeu(Jeu* jeu, QWidget* parent = nullptr)
  + getVuePlateau(): VuePlateau*
  + finiAction(int action): void
  + message(const char title[], const char texte[]): void
  + choixCarteNoble(bool ok_pour_choix): void
  <<slot>> - boutonSauvegardeClick(): void
  <<slot>> - boutonNouvellePartie(): void
  <<slot>> - boutonChargerPartie(): void
  <<slot>> - boutonActionPrivilege(): void
  <<slot>> - boutonPrendreJeton(): void
  <<slot>> - boutonRemplirPlateau(): void
  <<slot>> - boutonAcheterCarte(): void
  <<slot>> - boutonReserverCarte(): void
  <<slot>> - boutonJoueurJoueur(): void
  <<slot>> - boutonJoueurIA(): void
  <<slot>> - boutonIAIA(): void
  - checkPlateau(): bool
  - dessinerPartie(): void
  - choixDesJoueurs(): void
  - initJoueurs(bool j1EstHumain, bool j2EstHumain): void
  - deleteLayout(QLayout* layout): void
  - afficherChoix(): void
  - desactiverOuActiverBouton(bool etat): void
  - setEtatBoutonPrivilege(): void
  - setJoueurActuelInfo(): void
}

class VuePlateau {
  - plateau: Plateau*
  - layout_bouton: QGridLayout*
  - layout_carte: QGridLayout*
  - layout_info: QHBoxLayout*
  - main_layout: QVBoxLayout*
  - layout_privilege: QHBoxLayout*
  - vuesJetons: std::vector<VueJeton*>
  - vuesCartes: std::vector<VueCarteNoble*>
  - boutonValider: QPushButton*
  - boutonRemplissage: QPushButton*
  - boutonDonnerPrivilege: QPushButton*
  - vuesPrivileges: std::vector<VuePrivilege*>
  + VuePlateau(QWidget* parent = nullptr)
  + getPlateau(): Plateau*
  + getVuesNobles(): std::vector<VueCarteNoble*>
  + affichageJetons(bool etat_actif = false): void
  + affichageCartes(): void
  + desactiverOuActiverLesJetons(bool nouvel_etat): void
  <<slot>> - jetonClick_Plateau(VueJeton*): void
  <<slot>> - validerPlateau(): void
  <<slot>> - remplirPlateau(): void
  <<slot>> - privilegeClick_Plateau(VuePrivilege*): void
  <<slot>> - carteNobleClick_Plateau(VueCarteNoble*): void
  - miseAJourJetons(): void
  - affichagePrivileges(): void
}


Plateau "1" --- "1" VuePlateau
Jeu "1" -- "1" VueJeu
Jeton "*" --- "1" VueJeton
CarteNoble "*" --- "1" VueCarteNoble
CarteJoaillerie "*"--- "1"VueCarteJoaillerie

Joueur <|-- IA
Joueur <|-- Humain
Joueur *-- FenetreInformations

Jeu <.. Handler

Jeu *--- "1" Plateau
Jeu *-- "2" Joueur
Jeu *-- "3" Pioche
Jeu *--"1" Affichage
Jeu *--"0..2" Optionnelle
Jeu *--"0..3" Obligatoire

Plateau "1" --- "0...25" Jeton: possède >
Plateau "1"--"0..3" Privilege: comporte >
Plateau o---"0...4" CarteNoble: contient >
Plateau --- ReponseValidationSelection : utilise en valeur de retour >
'Plateau "1"-"3" Pioche

Pioche o--"0..67" CarteJoaillerie

Joueur "1" -- "0..3" Privilege: détient >
Joueur "1" --- "0..10" Jeton: possède >
Joueur o--"0..2" CarteNoble

Carte <|-- CarteNoble
Carte <|-- CarteJoaillerie
'(CarteJoaillerie, Pierre) .. AchatCarte

Pioche --> "friend" VuePioche



@enduml
